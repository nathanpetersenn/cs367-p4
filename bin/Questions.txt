/*******************************************************************************
File:             Questions.txt

Author:           Nathan Petersen npetersen
                  Evan Degler degler

Completion Date:  April 17, 2016

Course:           CS 367, Spring 2016
*******************************************************************************/
Directions: answer the following six (6) questions. 

1) Before running your program, what is the worst complexity of building tree for 
ArrayList, Binary Search Tree, Binary Search Tree with a small positive
rebalance factor(e.g 2) and RBTree?

Answer:
ArrayList - O(N)
Binary Search Tree - O(N log N)
Binary Search Tree w/Small Rebalance Factor - O(N log N)
RBTree - O(N log N)

2) Before running your program, what is the worst complexity of contains search for 
ArrayList, Binary Search Tree, Binary Search Tree with a small positive
rebalance factor(e.g 2) and RBTree?

Answer:
ArrayList - O(N)
Binary Search Tree - O(N)
Binary Search Tree w/Small Rebalance Factor - O(log N)
RBTree - O(log N)


3) Before running your program, what is the worst complexity of range search for 
ArrayList, Binary Search Tree, Binary Search Tree with a small positive
rebalance factor(e.g 2) and RBTree? Assume the range is small.

Answer: for looking on interval [a, b):
ArrayList - O(N) 
Binary Search Tree - O(N)
Binary Search Tree w/Small Rebalance Factor - O(log N)
RBTree - O(log N)

For questions 4 - 6, you should use the Evaluator program as written.

4) In this question you will run the program using the parameters 
indicated below:

random_1000.txt 10 2 3

a)For random data, what are the rankings (from fastest to slowest) for the four 
data structures based on the mean time of building a tree, contains search, and range
search? 
b)What about for the sorted data?

Answer:
a) Fastest->Slowest:
		Build Tree: ArrayListSet, BSTreeSet & RBTreeSet (tie), BSTreeBSet
		Contains: BSTreeSet & BSTreeBSet & RBTreeSet (tie), ArrayListSet
		Range Search: BSTreeBSet, BSTreeSet, ArrayListSet, RBTreeSet
b) Fastest->Slowest:
		Build Tree: ArrayListSet & BSTreeSet (tie), BSTreeBSet, RBTreeSet
		Contains: BSTreeSet & BSTreeBSet & RBTreeSet (tie), ArrayListSet
		Range Search: RBTreeSet, ArrayListSet & BSTreeBSet (tie), BSTreeSet


5) In this question you will run the program using the parameters 
indicated below:

random_10000.txt 10 2 3

a)Does the ranking change for the larger data set on random data and sorted data? 
b)Which data structure has the largest growth rate function? Explain your answers in terms
of building tree, contains search and range search for random data and sorted data.

Answer:

a) For random data: the order changes slightly, but only huge jump is in ArrayList's range search (got really slow)
	Building is still very similar, except BSTreeSet is slightly faster than RBTreeSet
	Contains is also similar: Fastest->Slowest: BSTreeBSet, RBTreeSet, BSTreeSet, ArrayListSet
	Range Search is similar as well: Fastest->Slowest: BSTreeBSet, BSTreeSet, RBTreeSet, ArrayListSet
	
   For sorted data:
	Build tree: Very different: fast->slow: ArrayListSet, RBTreeSet, BSTreeSet, BSTreeBSet
	Contains: different: fast->slow: BSTreeBSet, RBTreeSet, ArrayListSet, BSTreeSet
	Range search: similar: fast->slow: BSTreeBSet, RBTreeSet, ArrayListSet, BSTreeSet

b) When programming with a Data Structure, you only build the structure once because the main purpose is
to actually use it. This means that the Build Time is less important than the Contains Search time and 
Range Search time. Looking only at the latter times, ArrayListSet has the slowest times, thus the largest
growth rate function for random data. For sorted data, BSTreeSet is also slow, but ArrayListSet outweighs it.

6) In this question you will run the program using the parameters 
indicated below:

random_1000.txt 10 2 3
random_1000.txt 10 5 3
random_1000.txt 10 10 3

Briefly explain how the rebalanceThreshold effects the time for building tree, contains search 
and range search.
Answer:

When the rebalance threshold is increased:
  - Build Time goes down because the tree doesn't need to be rebalanced as often. 
	Since the rebalance algorithm is fairly inefficient, not calling it makes building faster.
  - Contains Search Time fluctuates depending on if the total data entries is a mulitple of the
    threshold. The time does not change drastically; it varies around the time for a well-balanced tree
  - Range Search Time is very similar to contains search time: it also does not change
    drastically when the rebalance threshold is increased. The time simply fluctuates like 
    the contains search time does.

